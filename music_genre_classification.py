# -*- coding: utf-8 -*-
"""Music Genre Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SBWusd8KQDVGxvk-2v9oovti7_OA8jL-
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import pandas as pd
import librosa
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense  # Import LSTM
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import confusion_matrix, classification_report
import joblib

# Path to the dataset
data_path = '/content/drive/MyDrive/genres'

# List of genres
genres = os.listdir(data_path)

# Function to extract features from an audio file
def extract_features(file_path):
    try:
        y, sr = librosa.load(file_path, sr=None)
        # Extract MFCC features
        mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
        return mfccs.T  # Transpose to get shape (timesteps, features)
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return None

# Prepare the dataset
features = []
labels = []

for genre in genres:
    genre_path = os.path.join(data_path, genre)
    for file_name in os.listdir(genre_path):
        file_path = os.path.join(genre_path, file_name)
        feature_vector = extract_features(file_path)
        if feature_vector is not None:
            features.append(feature_vector)
            labels.append(genre)

# Convert to numpy arrays
X = np.array(features, dtype=object)
y = np.array(labels)

# Padding sequences to have the same shape
max_timesteps = max(len(x) for x in X)
X_padded = np.zeros((len(X), max_timesteps, 13))

for i, x in enumerate(X):
    X_padded[i, :x.shape[0], :] = x

# Standardize features
scaler = StandardScaler()
X_padded_reshaped = X_padded.reshape(-1, 13)
X_scaled = scaler.fit_transform(X_padded_reshaped)
X_scaled = X_scaled.reshape(X_padded.shape)

# Encode labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
y_categorical = to_categorical(y_encoded)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_categorical, test_size=0.2, random_state=42)

# Create and train the LSTM model
model = Sequential()
model.add(LSTM(64, input_shape=(max_timesteps, 13), return_sequences=False))  # Use LSTM instead of SimpleRNN
model.add(Dense(64, activation='relu'))
model.add(Dense(len(genres), activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# Train the model
history = model.fit(X_train, y_train, epochs=70, batch_size=32, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy:.2f}")

# Predict on the test set
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(y_test, axis=1)

# Plot training & validation accuracy values
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'])

# Plot training & validation loss values
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'])

plt.tight_layout()
plt.show()

# Confusion matrix and classification report
conf_matrix = confusion_matrix(y_true_classes, y_pred_classes)
report = classification_report(y_true_classes, y_pred_classes, target_names=label_encoder.classes_)
print(report)

# Plot confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# Save the trained LSTM model
model.save('lstm_model.h5')

# Save the scaler used for feature scaling
joblib.dump(scaler, 'scaler.pkl')

# Function to classify a single audio file
def classify_audio(file_path, model, scaler):
    feature_vector = extract_features(file_path)
    if feature_vector is not None:
        feature_vector_padded = np.zeros((max_timesteps, 13))
        feature_vector_padded[:feature_vector.shape[0], :] = feature_vector
        feature_vector_reshaped = feature_vector_padded.reshape(-1, 13)
        feature_vector_scaled = scaler.transform(feature_vector_reshaped)
        feature_vector_scaled = feature_vector_scaled.reshape((1, max_timesteps, 13))
        prediction = model.predict(feature_vector_scaled)
        predicted_class = np.argmax(prediction)
        predicted_genre = label_encoder.inverse_transform([predicted_class])
        return predicted_genre[0]
    else:
        return None

# Load the trained LSTM model and scaler
from tensorflow.keras.models import load_model

model = load_model('lstm_model.h5')
scaler = joblib.load('scaler.pkl')

# Test cases: Classify new audio files
test_files = [
    '/content/drive/MyDrive/genres/classical/classical.00004.au',
    '/content/drive/MyDrive/genres/rock/rock.00002.au',
    '/content/drive/MyDrive/genres/disco/disco.00001.au'
]

for test_file in test_files:
    genre_prediction = classify_audio(test_file, model, scaler)
    if genre_prediction:
        print(f"Predicted genre for {os.path.basename(test_file)}: {genre_prediction}")
    else:
        print(f"Failed to classify {os.path.basename(test_file)}")